@page
@model BookStoreWeb.Pages.Categories.CreateModel
@using Microsoft.AspNetCore.Mvc.ModelBinding

@{
    ViewData["Title"] = "Create";

    var nameStatus = ViewData.ModelState.GetFieldValidationState("Name") switch
    {
        ModelValidationState.Valid => "is-valid",
        ModelValidationState.Invalid => "is-invalid",
        _ => string.Empty
        };

    var displayOrderStatus = ViewData.ModelState.GetFieldValidationState("DisplayOrder") switch
    {
        ModelValidationState.Valid => "is-valid",
        ModelValidationState.Invalid => "is-invalid",
        _ => string.Empty
        };
}

<form method="post">
    <div class="" asp-validation-summary="ModelOnly"></div>
    <div class="border p-3 mt-4">
        <div class="mb-2">
            <h2>Create Category</h2>
            <hr/>
        </div>
        <div class="mb-3">
            <label asp-for="Category.Name" class="form-label"></label>
            <input asp-for="Category.Name"
                   class="form-control @nameStatus">
            <span class="" asp-validation-for="Category.Name"></span>
        </div>
        <div class="mb-4">
            <label asp-for="Category.DisplayOrder" class="form-label"></label>
            <input asp-for="Category.DisplayOrder" class="form-control @displayOrderStatus">
            <span class="" asp-validation-for="Category.DisplayOrder"></span>
        </div>

        <button class="btn btn-primary me-3">Create</button>
        <a asp-action="Index" class="btn btn-outline-primary">Back</a>
    </div>
</form>


@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}